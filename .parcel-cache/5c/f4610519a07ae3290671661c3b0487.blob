*,
*::after,
*::before {
	box-sizing: border-box;
}

:root {
	font-size: 12px;
}

body {
	margin: 0;
	--color-text: #000;
	--color-alt: #000;
	--color-bg: #dcd7cd;
	--color-link: #000;
	--color-link-hover: #000;
	color: var(--color-text);
	background-color: var(--color-bg);
	font-family: usual,-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

/* Page Loader */
.js .loading::before,
.js .loading::after {
	content: '';
	position: fixed;
	z-index: 1000;
}

.js .loading::before {
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: var(--color-bg);
}

.js .loading::after {
	top: 50%;
	left: 50%;
	width: 60px;
	height: 60px;
	margin: -30px 0 0 -30px;
	border-radius: 50%;
	opacity: 0.4;
	background: var(--color-link);
	animation: loaderAnim 0.7s linear infinite alternate forwards;

}

@keyframes loaderAnim {
	to {
		opacity: 1;
		transform: scale3d(0.5,0.5,1);
	}
}

a {
	text-decoration: none;
	color: var(--color-link);
	outline: none;
}

a:hover {
	color: var(--color-link-hover);
	outline: none;
}

/* Better focus styles from https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible */
a:focus {
	/* Provide a fallback style for browsers
	 that don't support :focus-visible */
	outline: none;
	background: lightgrey;
}

a:focus:not(:focus-visible) {
	/* Remove the focus indicator on mouse-focus for browsers
	 that do support :focus-visible */
	background: transparent;
}

a:focus-visible {
	/* Draw a very noticeable focus style for
	 keyboard-focus on browsers that do support
	 :focus-visible */
	outline: 2px solid red;
	background: transparent;
}

.unbutton {
	background: none;
	border: 0;
	padding: 0;
	margin: 0;
	font: inherit;
}

.unbutton:focus {
	outline: none;
}

.js .oh {
	display: inline-block;
	position: relative;
	overflow: hidden;
}

.js .oh > span {
	display: inline-block;
	will-change: transform;
}

.frame {
	padding: 3rem 5vw;
	text-align: center;
	position: relative;
	z-index: 1000;
	text-transform: uppercase;
}

.frame a {
	font-weight: 700;
}

.frame__title {
	font-size: 1rem;
	margin: 0 0 1rem;
	font-weight: normal;
}

.frame__links {
	display: inline;
}

.frame__links a:not(:last-child) {
	margin-right: 1rem;
}

.frame__close {
	text-transform: uppercase;
	font-weight: bold;
	cursor: pointer;
}

.frame__close span::before {
	content: "\2715";
	margin: 0 0.25rem 0;
	vertical-align: top;
}

.content {
	display: flex;
	flex-direction: column;
	width: 100vw;
	height: calc(100vh - 13rem);
	position: relative;
	justify-content: flex-start;
	align-items: center;
	padding: 6rem 4vw;
}

.content__quote {
	font-size: 4.5vw;
	font-weight: 300;
	margin: 0;
	text-indent: 20vw;
}

.content__quote span.word {
	will-change: transform, opacity;
}

.menu-item {
	font-weight: 400;
	position: relative;
	display: inline-block;
	text-indent: 0;
	cursor: pointer;
	z-index: 100;
}

.menu-item::after {
	content: '';
	position: absolute;
	top: 89%;
	left: 0;
	width: 100%;
	height: 4px;
	background: var(--color-alt);
	z-index: -1;
	transform: scale3d(0.001,1,1);
	opacity: 0;
	transform-origin: 100% 50%;
	transition: transform 0.3s ease-out, opacity 0s 0.3s linear;
}

.menu-item.menu-item--active::after,
.content--menu .menu-item.menu-item--active:hover::after,
.menu-item:hover::after {
	opacity: 1;
	transform: scale3d(1,1,1);
	transform-origin: 0% 50%;
	transition: transform 0.3s ease-out, opacity 0s linear;
}

.content--menu .menu-item::after {
	transform-origin: 0% 50%;
}

.content--menu .menu-item:hover::after {
	transform: scale3d(0.15,1,1);
}

.splitting .word {
	text-indent: 0;
	pointer-events: none;
}

.galleries {
	position: absolute;
	width: 100%;
	height: 100vh;
	top: 0;
	left: 0;
	pointer-events: none;
}

.galleries__deco {
	position: fixed;
	bottom: 0;
	color: #fff;
	font-weight: 300;
	font-size: 5vw;
	text-transform: uppercase;
	white-space: nowrap;
	line-height: 0;
	pointer-events: none;
}

.gallery {
	position: relative;
	width: 100%;
	height: 100%;
	display: flex;
	overflow: hidden;
	align-items: center;
	isolation: isolate;
	height: 0;
}

.gallery--current {
	position: absolute;
	top: 0;
	left: 0;
	height: 100%;
}

.gallery::after {
	content: '';
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: linear-gradient(90deg, rgba(0,0,0,0) 0%, rgba(220,215,205,1) 100%);
}

.gallery__img {
	flex: none;
	width: 14.5vw;
	height: auto;
	margin: 0 -1vw;
	mix-blend-mode: soft-light;
	opacity: 0.8;
}

.gallery__img:nth-child(odd) {
	margin-top: 20vh;
}

.gallery__img:nth-child(3n) {
	margin-top: -20vh;
}

@media screen and (min-width: 53em) {
	.frame {
		position: fixed;
		text-align: left;
		z-index: 100;
		top: 0;
		left: 0;
		display: grid;
		align-content: space-between;
		width: 100%;
		max-width: none;
		height: 100vh;
		padding: 3rem 4vw;
		pointer-events: none;
		grid-template-columns: 20vw 36vw 1fr auto;
		grid-template-rows: auto auto auto;
		grid-template-areas: 'title links category close'
							'... ... ... ...'
							'author ad ad credits';
	}
	.frame__title {
		grid-area: title;
		margin: 0;
	}
	.frame__links {
		grid-area: links;
		padding: 0;
		justify-self: start;
	}
	.frame__author {
		grid-area: author;
		align-self: end;
	}
	.frame__credits {
		grid-area: credits;
		justify-self: end;
		align-self: end;
		margin: 0;
	}
	.frame__close {
		grid-area: close;
		justify-self: end;
	}
	.frame__category {
		grid-area: category;
		justify-self: start;
		margin: 0;
	}
	.frame a, 
	.frame button {
		pointer-events: auto;
	}
	.content {
		height: 100vh;
		justify-content: center;
	}
}

/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  user-select: none;
}

/* Expanded CSS Variables */

.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);

  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);

  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));

  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  /* Percent (0-1) of the char's position */
  --char-percent: calc(var(--char-index) / var(--char-total));

  /* Offset from center, positive & negative */
  --char-offset: calc(var(--char-index) - var(--char-center));

  /* Absolute distance from center, only positive */
  --distance: calc(
     (var(--char-offset) * var(--char-offset)) / var(--char-center)
  );

  /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
  --distance-sine: calc(var(--char-offset) / var(--char-center));

  /* Distance from center where 1 is far left/far right, 0 is center */
  --distance-percent: calc((var(--distance) / var(--char-center)));
}

.splitting.cells img { width: 100%; display: block; }

@supports ( display: grid ) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }

  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0; 
    left: 0; 
    width: 100%; 
    height: 100%;
    display: grid;
    grid-template: repeat( var(--row-total), 1fr ) / repeat( var(--col-total), 1fr );
  }

  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }

  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    /* Size to fit the whole container size */
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }

  /* Helper variables for advanced effects */
  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);

    /* Offset from center, positive & negative */
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));

    /* Absolute distance from center, only positive */
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );

    /* Absolute distance from center, only positive */
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}


/*# sourceMappingURL=index.HASH_REF_470b9239bdbc6adaca828777c524e9bf.css.map */
