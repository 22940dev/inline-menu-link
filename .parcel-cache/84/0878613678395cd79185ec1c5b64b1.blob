var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Menu", function () {
  return Menu;
});
var _gsap = require('gsap');
var _utils = require('./utils');
// calculate the viewport size
let winsize = _utils.calcWinsize();
window.addEventListener('resize', () => winsize = _utils.calcWinsize());
class Menu {
  constructor() {
    this.DOM = {};
    // all frame links
    this.DOM.frameLinks = [...document.querySelectorAll('.oh')];
    // frame links that are links to show only when the menu appears (after clicking on one of the sentence inline links)
    this.DOM.frameLinksContent = this.DOM.frameLinks.filter(el => el.classList.contains('view-content'));
    // remaining (the ones shown initially)
    this.DOM.frameLinksInitial = this.DOM.frameLinks.filter(el => !this.DOM.frameLinksContent.includes(el));
    // close menu button
    this.DOM.closeCtrl = document.querySelector('.frame__close');
    // the links
    this.DOM.menuItems = [...document.querySelectorAll('.menu-item')];
    // remaining text (span.word)
    this.DOM.textWords = [...document.querySelectorAll('.content__quote > span.whitespace, .content__quote > span.word')];
    this.init();
  }
  init() {
    // hide all the frame links (.oh) that are links to show only when the menu appears (after clicking on one of the sentence inline links)
    _gsap.gsap.set(this.DOM.frameLinksContent.map(el => el.children), {
      y: '-100%'
    });
    this.initEvents();
  }
  initEvents() {
    this.DOM.menuItems.forEach(menuItem => {
      menuItem.addEventListener('click', this.onMenuItemClick.bind(this));
    });
    this.DOM.closeCtrl.addEventListener('click', this.closeMenu.bind(this));
  }
  /*show links for the content or initial page*/
  toggleFrameLinks() {
    _gsap.gsap.timeline({
      defaults: {
        duration: 0.7,
        ease: 'power4.inOut'
      }
    }).to(this.DOM.frameLinksInitial.map(el => el.children), {
      y: this.isContentPage ? '100%' : '0%'
    }).to(this.DOM.frameLinksContent.map(el => el.children), {
      y: this.isContentPage ? '0%' : '-100%'
    }, 0);
  }
  onMenuItemClick(ev) {
    ev.preventDefault();
    if (!this.isContentPage) {
      this.animateLinksToMenu();
    }
    this.isContentPage = true;
    // this.showContent();
    this.toggleFrameLinks();
  }
  closeMenu() {
    this.isContentPage = false;
    this.toggleFrameLinks();
    this.hideContent();
  }
  animateLinksToMenu() {
    _gsap.gsap.timeline({
      defaults: {
        duration: 0.7,
        ease: 'power4.inOut'
      }
    }).to(this.DOM.menuItems, {
      x: (_, target) => winsize.width * 0.6 - target.offsetLeft
    }).to(this.DOM.textWords.sort((a, b) => {
      if (a.offsetLeft < b.offsetLeft) {
        return -1;
      } else if (a.offsetLeft > b.offsetLeft) {
        return 1;
      }
      return 0;
    }), {
      duration: 0.6,
      x: -200,
      opacity: 0,
      stagger: 0.004
    }, 0);
  }
  hideContent() {
    _gsap.gsap.timeline({
      defaults: {
        duration: 0.7,
        ease: 'power4.inOut'
      }
    }).to(this.DOM.menuItems, {
      duration: 0.9,
      x: 0
    }).to(this.DOM.textWords.sort((a, b) => {
      if (a.offsetLeft < b.offsetLeft) {
        return -1;
      } else if (a.offsetLeft > b.offsetLeft) {
        return 1;
      }
      return 0;
    }), {
      x: 0,
      opacity: 1,
      stagger: -0.004
    }, 0);
  }
}
