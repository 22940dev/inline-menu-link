var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Menu", function () {
  return Menu;
});
var _gsap = require('gsap');
var _utils = require('./utils');
var _menuItem = require('./menuItem');
// calculate the viewport size
let winsize = _utils.calcWinsize();
window.addEventListener('resize', () => winsize = _utils.calcWinsize());
class Menu {
  constructor() {
    this.DOM = {};
    // all frame links
    this.DOM.frameLinks = [...document.querySelectorAll('.oh')];
    // frame links that are links to show only when the menu appears (after clicking on one of the sentence inline links)
    this.DOM.frameLinksContent = this.DOM.frameLinks.filter(el => el.classList.contains('view-content'));
    // remaining (the ones shown initially)
    this.DOM.frameLinksInitial = this.DOM.frameLinks.filter(el => !this.DOM.frameLinksContent.includes(el));
    // close menu button
    this.DOM.closeCtrl = document.querySelector('.frame__close');
    // content element
    this.DOM.content = document.querySelector('.content');
    // the links
    this.DOM.menuItems = [...this.DOM.content.querySelectorAll('.menu-item')];
    this.menuItems = [];
    this.DOM.menuItems.forEach(item => this.menuItems.push(new _menuItem.MenuItem(item)));
    // remaining text (span.word)
    this.DOM.textWords = [...this.DOM.content.querySelectorAll('.content__quote > span.whitespace, .content__quote > span.word')];
    // check if we are at the initial page (sentence view) or the content page (menu/gallery view)
    this.isContentPage = false;
    this.init();
  }
  init() {
    // hide all the frame links that should be visible only after clicking on one of the sentence inline links
    _gsap.gsap.set(this.DOM.frameLinksContent, {
      pointerEvents: 'none'
    });
    _gsap.gsap.set(this.DOM.frameLinksContent.map(el => el.children), {
      y: '-100%'
    });
    // init/bind events
    this.initEvents();
  }
  initEvents() {
    // click on on of the sentence inline links
    this.DOM.menuItems.forEach(menuItem => {
      menuItem.addEventListener('click', this.openMenu.bind(this));
    });
    // click the close menu control
    this.DOM.closeCtrl.addEventListener('click', this.closeMenu.bind(this));
  }
  /*show links for the content or initial page*/
  toggleFrameLinks() {
    _gsap.gsap.timeline({
      defaults: {
        duration: 1.3,
        ease: 'expo.inOut'
      },
      onStart: () => {
        // pointer events logic for the frame links:
        _gsap.gsap.set(!this.isContentPage ? this.DOM.frameLinksInitial : this.DOM.frameLinksContent, {
          pointerEvents: 'none'
        });
        _gsap.gsap.set(!this.isContentPage ? this.DOM.frameLinksContent : this.DOM.frameLinksInitial, {
          pointerEvents: 'auto'
        });
      }
    }).to(this.DOM.frameLinksInitial.map(el => el.children), {
      y: !this.isContentPage ? '100%' : '0%'
    }).to(this.DOM.frameLinksContent.map(el => el.children), {
      y: !this.isContentPage ? '0%' : '-100%'
    }, 0);
  }
  openMenu(ev) {
    ev.preventDefault();
    // remove active class from the current menu item
    if (this.currentMenuItem != undefined) {
      this.DOM.menuItems[this.currentMenuItem].classList.remove('menu-item--active');
      // and hide the current gallery
      const gallery = this.menuItems[this.currentMenuItem].DOM.gallery;
      gallery.classList.remove('gallery--current');
    }
    // index of clicked menu item
    this.currentMenuItem = this.DOM.menuItems.indexOf(ev.target);
    // add class menu-item--active to the clicked menu item and content--menu to the content element
    // related to the link underline animation (CSS)
    ev.target.classList.add('menu-item--active');
    if (!this.isContentPage) {
      if (this.isAnimating) return;
      this.isAnimating = true;
      this.DOM.content.classList.add('content--menu');
      this.toggleFrameLinks();
      this.toggleLinksToMenu();
    }
  }
  closeMenu() {
    if (this.isAnimating) return;
    this.isAnimating = true;
    // related to the link underline animation (CSS)
    this.DOM.menuItems[this.currentMenuItem].classList.remove('menu-item--active');
    this.DOM.content.classList.remove('content--menu');
    this.toggleFrameLinks();
    this.toggleLinksToMenu();
  }
  /*animate links to the right side and the remaining text to the left, fading out*/
  /*or vice versa*/
  toggleLinksToMenu() {
    const gallery = this.menuItems[this.currentMenuItem].gallery;
    gallery.DOM.el.classList.add('gallery--current');
    _gsap.gsap.timeline({
      defaults: {
        duration: 1.3,
        ease: 'expo.inOut'
      },
      onComplete: () => {
        this.isContentPage = !this.isContentPage;
        this.isAnimating = false;
      }
    }).set(gallery.DOM.images, {
      opacity: !this.isContentPage ? 0 : 1,
      x: !this.isContentPage ? '100%' : '0%'
    }, 0).to(this.DOM.menuItems, {
      x: (_, target) => !this.isContentPage ? winsize.width * 0.6 - target.offsetLeft : 0,
      stagger: !this.isContentPage ? {
        from: this.currentMenuItem,
        amount: 0.15
      } : 0
    }, 0).to(this.DOM.textWords.sort((a, b) => {
      // words are ordered by its left value
      if (a.offsetLeft < b.offsetLeft) {
        return -1;
      } else if (a.offsetLeft > b.offsetLeft) {
        return 1;
      }
      return 0;
    }), {
      duration: 1.2,
      x: !this.isContentPage ? -300 : 0,
      opacity: !this.isContentPage ? 0 : 1,
      stagger: !this.isContentPage ? 0.004 : -0.004
    }, 0).to(gallery.DOM.images, {
      opacity: !this.isContentPage ? 1 : 0,
      x: !this.isContentPage ? '0%' : '100%',
      stagger: !this.isContentPage ? 0.05 : -0.05
    }, 0);
  }
}
